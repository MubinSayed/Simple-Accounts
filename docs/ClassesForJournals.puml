@startuml
title Simple Accounts Classes
legend top left
    Showing support for Journals
endlegend


class Accountant {
    #fileClerk:AccountStorageInterface
    #journalist:JournalStorageInterface
    __construct(fileClerk:AccountStorageInterface):Accountant
    createChart(chartName:StringType, Org:Organisation, chart:ChartDefinition):Chart
    fileChart(chart:Chart):Accountant
    fetchChart(chartName:StringType):Chart
    setJournalist(journalist:JournalStorageInterface):Accountant
    createJournal(journalName:StringType, chart:Chart):Journal
    fileJournal(journal:Journal):Accountant
    fetchJournal(journalName:StringType):Journal
    writeTransaction(txn:SplitTransaction, chart:Chart, journal:Journal):SplitTransaction
}

interface JournalStorageInterface {
    setJournal(journalName:StringType):JournalStorageInterface
    writeJournal(journal:Journal):bool
    readJournal():Journal
    writeTransaction(transaction:SplitTransaction):IntType
    readTransaction(id:IntType):SplitTransaction
    readTransactions(nominal:Nominal):array[SplitTransaction]
}

class Currency << IntType >>

class JournalStore << (O,#FF7700) >>

class Entry {
    #id:Nominal
    #amount:Currency
    #type:AccountType
    __construct(id:Nominal, amount:Currency,  type:AccountType):Entry
    getId():Nominal
    getAmount():Currency
    getType():AccountType

}

class Entries << Monad\Collection >> {
    __construct(value:array = []):Entries
    addEntry(entry:Entry):Entries
    checkBalance():bool
}

class Journal {
    #journalist:JournalStorageInterface
    #journalName:StringType
    #crcy:Currency
    __construct(journalName:StringType, crcy:Currency,  journalist:JournalStorageInterface):Journal
    getName():StringType
    getCurrency():Currency
    write(transaction:SplitTransaction):SplitTransaction
    readTransaction(id:IntType):SplitTransaction|null
    readTransactions(id:Nominal):array[SplitTransaction]
}

class SplitTransaction {
    #id:IntType=null
    #date:DateTime
    #note:StringType
    #entries:Entries
    __construct(date:DateTime=null, note:StringType=null):SplitTransaction
    setId(id:IntType):SplitTransaction
    getId():IntType
    addEntry(entry:Entry):SplitTransaction
    getDrAc():Array[Nominal]
    getCrAc():Array[Nominal]
    getAmount():Currency
    getDate():DateTime
    getNote():StringType
    checkBalance():bool
    isSimple():bool
}

class SimpleTransaction {
    __construct(drAc:Nominal, crAc:Nominal, amount:Currency, note:StringType = null,  date:DateTime = null):SimpleTransaction
}

class Nominal <<DigitString>>

SplitTransaction <.. Journal
Currency "1" --* "1" Journal : has
JournalStorageInterface <-- JournalStore
JournalStore "1" --* "1" Accountant : has
JournalStore "1" --* "1" Journal : has
Nominal <.. Journal
Nominal <.. JournalStorageInterface
Journal <.. JournalStorageInterface
Entry "*" *-- "1" Entries : has
Entries "1" *-- "1" SplitTransaction : has
SplitTransaction <.. JournalStorageInterface
SplitTransaction <-- SimpleTransaction
@enduml